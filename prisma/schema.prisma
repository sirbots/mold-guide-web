// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String             @unique
  password         String
  doctorReviews    DoctorReview[]
  inspectorReviews InspectorReview[]
  RemediatorReview RemediatorReview[]
}

model Doctor {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  slug              String         @unique
  published         Boolean        @default(false)
  firstName         String
  middleName        String?
  lastName          String
  gender            String
  practiceName      String?
  phoneNumber       String?
  addressStreet     String?
  addressUnit       String?
  addressCity       String
  addressState      String
  addressZipcode    String?
  addressCountry    String
  website           String?
  telehealth        Boolean?
  shoemakerProtocol Boolean
  conditionsTreated String[]       @default(["Mold Illness"])
  certifications    String[]       @default([""])
  seesPatientsIn    String[]       @default([""])
  bio               String[]       @default(["Coming soon!"])
  createdAt         DateTime
  lastModified      DateTime
  reviews           DoctorReview[]
}

model Inspector {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  slug           String            @unique
  published      Boolean           @default(false)
  companyName    String
  phoneNumber    String?
  addressStreet  String?
  addressUnit    String?
  addressCity    String
  addressState   String
  addressZipcode String?
  addressCountry String
  website        String?
  certifications String[]          @default([""])
  bio            String[]          @default(["Coming soon!"])
  createdAt      DateTime
  lastModified   DateTime
  reviews        InspectorReview[]
}

model Remediator {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  slug           String             @unique
  published      Boolean            @default(false)
  companyName    String
  phoneNumber    String?
  addressStreet  String?
  addressUnit    String?
  addressCity    String
  addressState   String
  addressZipcode String?
  addressCountry String
  website        String?
  certifications String[]           @default([""])
  bio            String[]           @default(["Coming soon!"])
  createdAt      DateTime
  lastModified   DateTime
  reviews        RemediatorReview[]
}

model DoctorReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  published Boolean  @default(true)
  title     String
  body      String
  rating    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  Doctor    Doctor?  @relation(fields: [doctorId], references: [id])
  doctorId  String
  createdAt DateTime @default(now())
}

model InspectorReview {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  published   Boolean    @default(true)
  title       String
  body        String
  rating      Int
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String     @db.ObjectId
  createdAt   DateTime   @default(now())
  Inspector   Inspector? @relation(fields: [inspectorId], references: [id])
  inspectorId String
}

model RemediatorReview {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  published    Boolean     @default(true)
  title        String
  body         String
  rating       Int
  author       User        @relation(fields: [authorId], references: [id])
  authorId     String      @db.ObjectId
  createdAt    DateTime    @default(now())
  Remediator   Remediator? @relation(fields: [remediatorId], references: [id])
  remediatorId String
}

view EnrichedDoctorReviews {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  body       String
  rating     Int
  authorId   String   @db.ObjectId
  authorName String
  doctorId   String
  createdAt  DateTime
}

view EnrichedInspectorReviews {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  body        String
  rating      Int
  authorId    String   @db.ObjectId
  authorName  String
  inspectorId String
  createdAt   DateTime
}

view EnrichedRemediatorReviews {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  body         String
  rating       Int
  authorId     String   @db.ObjectId
  authorName   String
  remediatorId String
  createdAt    DateTime
}

// lookup
// /**
//  * from: The target collection.
//  * localField: The local join field.
//  * foreignField: The target join field.
//  * as: The name for the results.
//  * pipeline: Optional pipeline to run on the foreign collection.
//  * let: Optional variables to use in the pipeline field stages.
//  */
// {
//   from: "User",
//   localField: "authorId",
//   foreignField: "_id",
//   as: "UserData",
// }

// $project

// /**
//  * specifications: The fields to
//  *   include or exclude.
//  */
// {
//   _id: 1,
//   authorId: 1,
//   title: 1,
//   body: 1,
//   createdAt: 1,
//   doctorId: 1,
//   rating: 1,
//   authorName: "$UserData.name",
// }

// $unwind

// /**
//  * path: Path to the array field.
//  * includeArrayIndex: Optional name for index.
//  * preserveNullAndEmptyArrays: Optional
//  *   toggle to unwind null and empty values.
//  */
// {
//   path: "$authorName",
//   // includeArrayIndex: 'string',
//   // preserveNullAndEmptyArrays: boolean
// }
